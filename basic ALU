module alu (
    input [3:0] A,
    input [3:0] B,
    input [2:0] sel,  // select line to choose the operation
    output reg [3:0] Y
);

always @(*) begin
    case (sel)
        3'b000: Y = A + B;       // Addition
        3'b001: Y = A - B;       // Subtraction
        3'b010: Y = A & B;       // AND
        3'b011: Y = A | B;       // OR
        3'b100: Y = ~A;          // NOT (only A)
        default: Y = 4'b0000;
    endcase
end

endmodule


#testbench

`timescale 1ns/1ps
module alu_tb;

reg [3:0] A, B;
reg [2:0] sel;
wire [3:0] Y;

alu uut (
    .A(A),
    .B(B),
    .sel(sel),
    .Y(Y)
);

initial begin
    $display("A B sel Y");
    
    A = 4'b0011; B = 4'b0001; sel = 3'b000; #10;  // Add
    A = 4'b0100; B = 4'b0001; sel = 3'b001; #10;  // Sub
    A = 4'b1100; B = 4'b1010; sel = 3'b010; #10;  // AND
    A = 4'b1100; B = 4'b1010; sel = 3'b011; #10;  // OR
    A = 4'b1010; B = 4'b0000; sel = 3'b100; #10;  // NOT A

    $finish;
end

endmodule
